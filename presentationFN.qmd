---
title: "University Ranking"
author: "Honorine, Nastaran and Simon"
format: 
  revealjs:
    slide-number: true
    number-sections: false
    scrollable: true
    smaller: true
    toc: true
    toc-depth: 1
---
# <span style="text-align: center; justify-content: center; font-size: 1.4em;" >University Ranking</span>


```{python}
import pandas as pd
import numpy as np
import seaborn as sns
from pandas.core.tools.numeric import to_numeric
import geopandas as gpd

import plotly as px
import plotly.express as px # for interactive plots
import plotly.graph_objs as go
from plotly.subplots import make_subplots
import matplotlib.pyplot as plt

import os
import warnings
warnings.filterwarnings("ignore")
```


## Top 150 Universities By Country

```{python}
# First table of  Location dataset. 
# Location for the first 150 schools
df = pd.read_csv('C:/Users/Nastaran/Desktop/UniversityConstructor/semester3/Vitualization/FinalProject/DataStory_UniversityRanking/data/data.csv')
fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(15,10))
fig.set_facecolor('#f0f0f0') 

top_150 = df[:150]
top_150_by_country = top_150['location'].value_counts().reset_index()
top_150_by_country.columns = ['location', 'Count']
top_150_by_country.set_index('location', inplace=True)
top_150_by_country.plot(kind='bar', y='Count', ylabel='Count', ax=axes, title='Top 150 By Country')
axes.bar_label(axes.containers[0])

plt.show()
```


## Top Rank Universities Per Country

```{python}

# Top Rank Universities Per Country
df_new = pd.read_csv('top_150_universities.csv')
plt.style.use('Solarize_Light2')
plt.figure(figsize=(15,10))
sns.countplot(data=df_new,y='location')                   
plt.xticks(rotation='vertical')
plt.title('Top Universities ',fontsize=40)           
plt.ylabel('Count',fontsize=25)                                 
plt.xlabel('Top Rank Universities Per Country',fontsize=25)     
plt.show()
```

## rankings of university for comparison of  the different categories:research and international outlook using horizontal bar chart

```{python}
 #rankings of university for comparison of  the different categories:research and international outlook using horizontal bar chart

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(20,10))
fig.set_facecolor('#f0f0f0') 

# Rank schools by 
academic_rep_score = df.sort_values(by='scores_teaching_rank', ascending=False)
academic_rep_score[:10].set_index('name').plot(kind='barh', y='scores_research_rank', ax=axes[0])
axes[0].bar_label(axes[0].containers[0])

employer_rep_score = df.sort_values(by='scores_international_outlook_rank', ascending=False)
# print(employer_rep_score[['Institution Name', 'Employer Reputation Score']])
employer_rep_score[:10].set_index('location').plot(kind='barh', y='scores_international_outlook_rank', ax=axes[1])
axes[1].bar_label(axes[1].containers[0])

del academic_rep_score, employer_rep_score
```

## Distribution of scores accross various categories.
```{python}
 score_col = [
    "scores_teaching_rank", 
    "scores_research_rank", 
    "scores_international_outlook_rank", 
    "scores_citations_rank"
]
fig, ax = plt.subplots(figsize=(20,8))
for index, col in enumerate(score_col):
    sns.histplot(df_new[col], label=col, bins=20, kde =False, color = sns.color_palette("Set1")[index],ax=ax, multiple="stack")

ax.legend(loc="upper left", bbox_to_anchor=(1, 1))
plt.ylabel(ylabel = "Number of Schools", fontsize=25)
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.xlabel(xlabel= "Score", fontsize=25)
fig.suptitle('Distribution of Score Across Various Categories', fontsize=20, x = 0.5, y = 0.95)
plt.show()
```


## Distribution of Score Across Various Categories
```{python}
 fig, ax = plt.subplots(figsize=(20, 8))
# Loop over the score columns and plot their distribution
for index, col in enumerate(score_col):
    sns.histplot(df_new[col], label=col, bins=np.arange(0, 105, 5), kde=False, 
                 color=sns.color_palette("Set1")[index], ax=ax, multiple="stack")

# Set the x-axis limit between 0 and 100 (score range)
plt.xlim(0, 100)

# Set x-axis ticks with a step of 5
plt.xticks(np.arange(0, 105, 5), fontsize=10)

# Add legend
ax.legend(loc="upper left", bbox_to_anchor=(1, 1))

# Labeling
plt.ylabel("Number of Schools", fontsize=15)
plt.xlabel("Score", fontsize=15)
plt.yticks(fontsize=10)

# Add title
fig.suptitle('Distribution of Score Across Various Categories', fontsize=25, x=0.5, y=0.95)

# Show the plot
plt.show()
```


## Research Rank vs. Citation Rank ,Overall Rank,Citation Rank vs. Overall Rank

```{python}
from scipy.stats import pearsonr

# Column names from the  dataset
research_rank_col = 'scores_research_rank'
citation_rank_col = 'scores_citations_rank'
overall_rank_col = 'scores_overall_rank'

# 1. Calculate the correlation between the variables
correlation_matrix = df_new[[research_rank_col, citation_rank_col, overall_rank_col]].corr()
print("Correlation matrix:")
print(correlation_matrix)

# Calculate Pearson correlation for individual pairs
corr_income_citation, _ = pearsonr(df_new[research_rank_col], df_new[citation_rank_col])
corr_income_ranking, _ = pearsonr(df_new[research_rank_col], df_new[overall_rank_col])
corr_citation_ranking, _ = pearsonr(df_new[citation_rank_col], df_new[overall_rank_col])

print(f"Pearson correlation between Research Rank and Citation Rank: {corr_income_citation:.2f}")
print(f"Pearson correlation between Research Rank and Overall Rank: {corr_income_ranking:.2f}")
print(f"Pearson correlation between Citation Rank and Overall Rank: {corr_citation_ranking:.2f}")

# 2. Scatter Plot with Trend Line
plt.figure(figsize=(18, 6))

# Research Rank vs. Citation Rank
plt.subplot(1, 3, 1)
sns.regplot(x=research_rank_col, y=citation_rank_col, data=df_new, scatter_kws={'s': 50}, line_kws={'color': 'red'})
plt.title('Research Rank vs Citation Rank', fontsize=15)
plt.xlabel('Research Rank', fontsize=12)
plt.ylabel('Citation Rank', fontsize=12)

# Research Rank vs. Overall Rank
plt.subplot(1, 3, 2)
sns.regplot(x=research_rank_col, y=overall_rank_col, data=df_new, scatter_kws={'s': 50}, line_kws={'color': 'red'})
plt.title('Research Rank vs Overall Rank', fontsize=15)
plt.xlabel('Research Rank', fontsize=12)
plt.ylabel('Overall Rank', fontsize=12)

# Citation Rank vs. Overall Rank
plt.subplot(1, 3, 3)
sns.regplot(x=citation_rank_col, y=overall_rank_col, data=df_new, scatter_kws={'s': 50}, line_kws={'color': 'red'})
plt.title('Citation Rank vs Overall Rank', fontsize=15)
plt.xlabel('Citation Rank', fontsize=12)
plt.ylabel('Overall Rank', fontsize=12)

# Display the plots
plt.tight_layout()
plt.show()
```

